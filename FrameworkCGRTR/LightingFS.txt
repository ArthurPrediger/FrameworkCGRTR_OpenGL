#version 440

uniform vec4 light_position;
uniform vec4 camera_position;
uniform vec4 diffuse_color;
uniform vec4 ambient_color;
uniform vec4 specular_color;
uniform float specular_glow;
uniform sampler2D diffuse_texture;
uniform sampler2D specular_texture;

in vec2 textureCoordinates;
in vec4 position;
in vec4 normal;

out vec4 frag_color;

void main () 
{
	const float diffuse_intensity = 1.0f;
	const float ambient_intensity = 0.3f;
	const float specular_intensity = 0.8f;

	const float distance_frag_to_light = length(position - light_position);
	const float c1 = 0.4f;
	const float c2 = 0.05f * distance_frag_to_light;
	const float c3 = 0.01f * distance_frag_to_light * distance_frag_to_light;
	const float attenuation_factor = min(1.0f / (c1 + c2 + c3), 1.0f);

	vec4 light_to_frag_vec = normalize(position - light_position);
	const float normal_into_light = max(0, dot(normal, (-light_to_frag_vec)));

	const vec4 diffuse = diffuse_intensity * normal_into_light * diffuse_color * texture(diffuse_texture, vec2(textureCoordinates.x, -textureCoordinates.y));

	const vec4 ambient = ambient_intensity * ambient_color * texture(diffuse_texture, vec2(textureCoordinates.x, -textureCoordinates.y));
	
	const vec4 light_reflection = normalize(2.0f * normal * normal_into_light + light_to_frag_vec);
	const vec4 frag_to_camera_vec = normalize(camera_position - position);
	const vec4 specular = specular_intensity * pow(max(0, dot(light_reflection, frag_to_camera_vec)), specular_glow) * specular_color * texture(specular_texture, vec2(textureCoordinates.x, -textureCoordinates.y));

	vec4 lighting = clamp(ambient + attenuation_factor * (diffuse + specular), 0.0f, 1.0f);

	frag_color = lighting;
}